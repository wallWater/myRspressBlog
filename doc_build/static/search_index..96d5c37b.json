[{"id":0,"title":"hello","routePath":"/about/","lang":"","toc":[],"domain":"","content":"#","frontmatter":{}},{"id":1,"title":"ÂÆû‰π†","routePath":"/about/ÂÆû‰π†","lang":"","toc":[],"domain":"","content":"#","frontmatter":{}},{"id":2,"title":"Markdown & MDX","routePath":"/guide/","lang":"","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":88},{"text":"Use Component","id":"use-component","depth":2,"charIndex":212},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":386},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":907},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1705},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1719},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1997},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":2195},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":2541}],"domain":"","content":"#\n\nRspress supports not only Markdown but also MDX, a powerful way to develop\ncontent.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n# Hello World\n\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n// docs/index.mdx\n\n\n# Hello World\n\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n---\ntitle: Hello World\n---\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n---\ntitle: Hello World\n---\n\n# {frontmatter.title}\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\nHello World\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n:::tip\nThis is a `block` of type `tip`\n:::\n\n:::info\nThis is a `block` of type `info`\n:::\n\n:::warning\nThis is a `block` of type `warning`\n:::\n\n:::danger\nThis is a `block` of type `danger`\n:::\n\n::: details\nThis is a `block` of type `details`\n:::\n\n:::tip Custom Title\nThis is a `block` of `Custom Title`\n:::\n\n:::tip{title=\"Custom Title\"}\nThis is a `block` of `Custom Title`\n:::\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n```js\nconsole.log('Hello World');\n```\n\n```js title=\"hello.js\"\nconsole.log('Hello World');\n```\n\n\nOutput:\n\nconsole.log('Hello World');\n\n\nconsole.log('Hello World');\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\nexport default {\n  // ...\n  markdown: {\n    showLineNumbers: true,\n  },\n};\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n```js title=\"hello.js\" {1,3-5}\nconsole.log('Hello World');\n\nconst a = 1;\n\nconsole.log(a);\n\nconst b = 2;\n\nconsole.log(b);\n```\n\n\nOuput:\n\nconsole.log('Hello World');\n\nconst a = 1;\n\nconsole.log(a);\n\nconst b = 2;\n\nconsole.log(b);\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","frontmatter":{}},{"id":3,"title":"Hello World!","routePath":"/hello","lang":"","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","content":"#\n\n\nStart#\n\nWrite something to build your own docs! üéÅ","frontmatter":{}}]