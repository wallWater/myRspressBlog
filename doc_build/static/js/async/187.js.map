{"version":3,"file":"static/js/async/187.js","sources":["./docs/index.md"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"index.md\"] = {\"toc\":[],\"title\":\"\",\"frontmatter\":{\"pageType\":\"home\",\"hero\":{\"name\":\"Rspress\",\"text\":\"Rspack-based Static Site Generator\",\"tagline\":\"Rspress tagline\",\"actions\":[{\"theme\":\"brand\",\"text\":\"Quick Start\",\"link\":\"/guide/\"},{\"theme\":\"alt\",\"text\":\"Github\",\"link\":\"https://github.com/web-infra-dev/rspress\"}],\"image\":{\"src\":\"/rspress-icon.png\",\"alt\":\"Rspress Logo\"}},\"features\":[{\"title\":\"Blazing fast build speed\",\"details\":\"The core compilation module is based on the Rust front-end toolchain, providing a more ultimate development experience.\",\"icon\":\"üèÉüèª‚Äç‚ôÄÔ∏è\"},{\"title\":\"Support for MDX content writing\",\"details\":\"MDX is a powerful way to write content, allowing you to use React components in Markdown.\",\"icon\":\"üì¶\"},{\"title\":\"Built-in full-text search\",\"details\":\"Automatically generates a full-text search index for you during construction, providing out-of-the-box full-text search capabilities.\",\"icon\":\"üé®\"},{\"title\":\"Simpler I18n solution\",\"details\":\"With the built-in I18n solution, you can easily provide multi-language support for documents or components.\",\"icon\":\"üåç\"},{\"title\":\"Static site generation\",\"details\":\"In production, it automatically builds into static HTML files, which can be easily deployed anywhere.\",\"icon\":\"üåà\"},{\"title\":\"Providing multiple custom capabilities\",\"details\":\"Through its extension mechanism, you can easily extend theme UI and build process.\",\"icon\":\"üî•\"}]}};\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA"}